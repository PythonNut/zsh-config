#compdef pylint
#
# this is zsh completion function file.
# generated by genzshcomp(ver: 0.2.1)
#

typeset -A opt_args
local context state line

_arguments -s -S \
  "--help[show this help message and exit]:" \
  "-h[show this help message and exit]:" \
  "--version[show program's version number and exit]:" \
  "--long-help[more verbose help.]" \
  "--rcfile[Specify a configuration file.]::<file>:_files" \
  "--init-hook[Python code to execute, usually for sys.path manipulation such as pygtk.require().]::<code>:_files" \
  "--errors-only[In error mode, checkers without error messages are disabled and for others, only the ERROR messages are displayed, and no reports are done by default]" \
  "-E[In error mode, checkers without error messages are disabled and for others, only the ERROR messages are displayed, and no reports are done by default]" \
  "--ignore[Add <file or directory> to the black list. It should be a base name, not a path. You may set this option multiple times. \[current: CVS\]]::<file>:_files" \
  "--persistent[Pickle collected data for later comparisons. \[current: yes\]]::<y_or_n>:_files" \
  "--load-plugins[List of plugins (as comma separated values of python modules names) to load, usually to register additional checkers. \[current: none\]]::<modules>:_files" \
  "--help-msg[Display a help message for the given message id and exit. The value may be a comma separated list of message ids.]::<msg-id>:_files" \
  "--list-msgs[Generate pylint's messages.]" \
  "--full-documentation[Generate pylint's full documentation.]" \
  "--generate-rcfile[Generate a sample configuration file according to the current configuration. You can put other options before this one to get them in the generated configuration.]" \
  "--enable[Enable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time.]::<msg ids>:_files" \
  "-e[Enable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time.]::<msg ids>:_files" \
  "--disable[Disable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time (only on the command line, not in the configuration file where it should appear only once).]::<msg ids>:_files" \
  "-d[Disable the message, report, category or checker with the given id(s). You can either give multiple identifier separated by comma (,) or put this option multiple time (only on the command line, not in the configuration file where it should appear only once).]::<msg ids>:_files" \
  "--output-format[Set the output format. Available formats are text, parseable, colorized, msvs (visual studio) and html \[current: text\]]::<format>:_files" \
  "-f[Set the output format. Available formats are text, parseable, colorized, msvs (visual studio) and html \[current: text\]]::<format>:_files" \
  "--include-ids[Include message's id in output \[current: no\]]::<y_or_n>:_files" \
  "-i[Include message's id in output \[current: no\]]::<y_or_n>:_files" \
  "--files-output[Put messages in a separate file for each module / package specified on the command line instead of printing them on stdout. Reports (if any) will be written in a file name \"pylint_global.\[txt|html\]\". \[current: no\]]::<y_or_n>:_files" \
  "--reports[Tells whether to display a full report or only the messages \[current: yes\]]::<y_or_n>:_files" \
  "-r[Tells whether to display a full report or only the messages \[current: yes\]]::<y_or_n>:_files" \
  "--evaluation[Python expression which should return a note less than 10 (10 is the highest note). You have access to the variables errors warning, statement which respectively contain the number of errors / warnings messages and the total number of statements analyzed. This is used by the  global evaluation report (RP0004). \[current: 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)\]]::<python_expression>:_files" \
  "--comment[Add a comment according to your evaluation note. This is used by the global evaluation report (RP0004). \[current: no\]]::<y_or_n>:_files" \
  "--ignore-mixin-members[Tells whether missing members accessed in mixin class should be ignored. A mixin class is detected if its name ends with \"mixin\" (case insensitive). \[current: yes\]]::<y_or_n>:_files" \
  "--ignored-classes[List of classes names for which member attributes should not be checked (useful for classes with attributes dynamically set). \[current: SQLObject\]]::<members:_files" \
  "--zope[When zope mode is activated, add a predefined set of Zope acquired attributes to generated-members. \[current: no\]]::<y_or_n>:_files" \
  "--generated-members[List of members which are set dynamically and missed by pylint inference system, and so shouldn't trigger E0201 when accessed. \[current: REQUEST,acl_users,aq_parent\]]::<members:_files" \
  "--max-args[Maximum number of arguments for function / method \[current: 5\]]::<int>:_files" \
  "--ignored-argument-names[Argument names that match this expression will be ignored. Default to name with leading underscore \[current: _.*\]]::<regexp>:_files" \
  "--max-locals[Maximum number of locals for function / method body \[current: 15\]]::<int>:_files" \
  "--max-returns[Maximum number of return / yield for function / method body \[current: 6\]]::<int>:_files" \
  "--max-branchs[Maximum number of branch for function / method body \[current: 12\]]::<int>:_files" \
  "--max-statements[Maximum number of statements in function / method body \[current: 50\]]::<int>:_files" \
  "--max-parents[Maximum number of parents for a class (see R0901). \[current: 7\]]::<num>:_files" \
  "--max-attributes[Maximum number of attributes for a class (see R0902). \[current: 7\]]::<num>:_files" \
  "--min-public-methods[Minimum number of public methods for a class (see R0903). \[current: 2\]]::<num>:_files" \
  "--max-public-methods[Maximum number of public methods for a class (see R0904). \[current: 20\]]::<num>:_files" \
  "--init-import[Tells whether we should check for unused import in __init__ files. \[current: no\]]::<y_or_n>:_files" \
  "--dummy-variables-rgx[A regular expression matching the beginning of the name of dummy variables (i.e. not used). \[current: _|dummy\]]::<regexp>:_files" \
  "--additional-builtins[List of additional names supposed to be defined in builtins. Remember that you should avoid to define new builtins when possible. \[current: none\]]::<comma:_files" \
  "--deprecated-modules[Deprecated modules which should not be used, separated by a comma \[current: regsub,string,TERMIOS,Bastion,rexec\]]::<modules>:_files" \
  "--import-graph[Create a graph of every (i.e. internal and external) dependencies in the given file (report RP0402 must not be disabled) \[current: none\]]::<file.dot>:_files" \
  "--ext-import-graph[Create a graph of external dependencies in the given file (report RP0402 must not be disabled) \[current: none\]]::<file.dot>:_files" \
  "--int-import-graph[Create a graph of internal dependencies in the given file (report RP0402 must not be disabled) \[current: none\]]::<file.dot>:_files" \
  "--max-line-length[Maximum number of characters on a single line. \[current: 80\]]::<int>:_files" \
  "--max-module-lines[Maximum number of lines in a module \[current: 1000\]]::<int>:_files" \
  "--indent-string[String used as indentation unit. This is usually \" \" (4 spaces) or \"\t\" (1 tab). \[current: '    '\]]::<string>:_files" \
  "--required-attributes[Required attributes for module, separated by a comma \[current: none\]]::<attributes>:_files" \
  "--bad-functions[List of builtins function names that should not be used, separated by a comma \[current: map,filter,apply,input\]]::<builtin:_files" \
  "--module-rgx[Regular expression which should only match correct module names \[current: ((\[a-z_\]\[a-z0-9_\]*)|(\[A-Z\]\[a-zA-Z0-9\]+))$\]]::<regexp>:_files" \
  "--const-rgx[Regular expression which should only match correct module level names \[current: ((\[A-Z_\]\[A-Z0-9_\]*)|(__.*__))$\]]::<regexp>:_files" \
  "--class-rgx[Regular expression which should only match correct class names \[current: \[A-Z_\]\[a-zA-Z0-9\]+$\]]::<regexp>:_files" \
  "--function-rgx[Regular expression which should only match correct function names \[current: \[a-z_\]\[a-z0-9_\]{2,30}$\]]::<regexp>:_files" \
  "--method-rgx[Regular expression which should only match correct method names \[current: \[a-z_\]\[a-z0-9_\]{2,30}$\]]::<regexp>:_files" \
  "--attr-rgx[Regular expression which should only match correct instance attribute names \[current: \[a-z_\]\[a-z0-9_\]{2,30}$\]]::<regexp>:_files" \
  "--argument-rgx[Regular expression which should only match correct argument names \[current: \[a-z_\]\[a-z0-9_\]{2,30}$\]]::<regexp>:_files" \
  "--variable-rgx[Regular expression which should only match correct variable names \[current: \[a-z_\]\[a-z0-9_\]{2,30}$\]]::<regexp>:_files" \
  "--inlinevar-rgx[Regular expression which should only match correct list comprehension / generator expression variable names \[current: \[A-Za-z_\]\[A-Za-z0-9_\]*$\]]::<regexp>:_files" \
  "--good-names[Good variable names which should always be accepted, separated by a comma \[current: i,j,k,ex,Run,_\]]::<names>:_files" \
  "--bad-names[Bad variable names which should always be refused, separated by a comma \[current: foo,bar,baz,toto,tutu,tata\]]::<names>:_files" \
  "--no-docstring-rgx[Regular expression which should only match functions or classes name which do not require a docstring \[current: __.*__\]]::<regexp>:_files" \
  "--notes[ated values> List of note tags to take in consideration, separated by a comma. \[current: FIXME,XXX,TODO\]]::<comma:_files" \
  "--ignore-iface-methods[List of interface methods to ignore, separated by a comma. This is used for instance to not check methods defines in Zope's Interface base class. \[current: isIm plementedBy,deferred,extends,names,namesAndDescription s,queryDescriptionFor,getBases,getDescriptionFor,getDo c,getName,getTaggedValue,getTaggedValueTags,isEqualOrE xtendedBy,setTaggedValue,isImplementedByInstancesOf,ad aptWith,is_implemented_by\]]::<method:_files" \
  "--defining-attr-methods[List of method names used to declare (i.e. assign) instance attributes. \[current: __init__,__new__,setUp\]]::<method:_files" \
  "--min-similarity-lines[Minimum lines number of a similarity. \[current: 4\]]::<int>:_files" \
  "--ignore-comments[or n> Ignore comments when computing similarities. \[current: yes\]]::<y:_files" \
  "--ignore-docstrings[Ignore docstrings when computing similarities. \[current: yes\]  onment variables are used :  y where data of persistent run will be stored. If ts to ~/.pylint.d/ or .pylint.d (in the current  The current PYLINTHOME is t.d.             * PYLINTRC ation file. If not found, it will use the first pylintrc, /etc/pylintrc. The current PYLINTRC is   ext output, the message format is : UM:\[OBJECT:\] MESSAGE message types : r programming standard violation bad code smell ython specific problems bable bugs in the code rror occurred which prevented pylint from doing    with following status code: nt fine ge was issued age was issued sage was issued ssage was issued  message was issued  be bit-ORed so you can know which different issued by analysing pylint output status code]::<y:_files" \
  "*::args:_files"
