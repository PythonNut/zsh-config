#compdef af

local -a _1st_arguments
_1st_arguments=(
  "target":"Reports current target or sets a new target"
  "login":"Login to appfog"
  "info":"System and account information"
  "apps":"List deployed applications"
  "push":"Create, push, map, and start a new application"
  "start":"Start the application"
  "stop":"Stop the application"
  "restart":"Restart the application"
  "delete":"Delete the application"
  "clone":"Clone the application and services"
  "update":"Update the application bits"
  "mem":"Update the memory reservation for an application"
  "map":"Register the application to the url"
  "unmap":"Unregister the application from the url"
  "instances":"Scale the application instances up or down"
  "crashes":"List recent application crashes"
  "crashlogs":"Display log information for crashed applications"
  "logs":"Display log information for the application"
  "files":"Display directory listing or file download for [path]"
  "stats":"Display resource usage for the application"
  "instances":"List application instances"
  "pull":"Downloads last pushed source to <appname> or [path]"
  "download":"Downloads last pushed source to zipfile"
  "env":"List application environment variables"
  "env-add":"Add an environment variable to an application"
  "env-del":"Delete an environment variable to an application"
  "services":"Lists of services available and provisioned"
  "create-service":"Create a provisioned service"
  "delete-service":"Delete a provisioned service"
  "bind-service":"Bind a service to an application"
  "unbind-service":"Unbind service from the application"
  "clone-services":"Clone service bindings from <src-app> application to <dest-app>"
  "export-service":"Export the data from a service"
  "import-service":"Import data into a service"
  "tunnel":"Create a local tunnel to a service"
  "user":"Display user account information"
  "passwd":"Change the password for the current user"
  "logout":"Logs current user out of the target system"
  "add-user":"Register a new user (requires admin privileges)"
  "delete-user":"Delete a user and all apps and services (requires admin privileges)"
  "runtimes":"Display the supported runtimes of the target system"
  "frameworks":"Display the recognized frameworks of the target system"
  "infras":"Display the available infrastructures"
  "micro status":"Display Micro Cloud Foundry VM status"
  "micro offline":"Configure Micro Cloud Foundry VM for offline mode"
  "micro online":"Configure Micro Cloud Foundry VM for online mode"
  "aliases":"List aliases"
  "alias":"Create an alias for a command"
  "unalias":"Remove an alias"
  "targets":"List known targets and associated authorization tokens"
  "help":"Get help on available options"
)

_arguments '*:: :->command'

if (( CURRENT == 1 )); then
  _describe -t commands "appfog commands" _1st_arguments
  return
fi

local -a _command_args
case "$words[1]" in
  login)
    _command_args=(
      '(--email)--email[Login with specified email]'\
      '(--passwd)--passwd[Login with specified password]' \
    )
    ;;
  push)
    _command_args=(
      '(--infra)--infra[Push application to specificed infrastructure]'\
      '(--instances)--instances[Set the expected number <N> of instance]' \
      '(--mem)--mem[Set the memory reservation for the applicatio]' \
      '(--no-start)--no-start[Do not auto-start the applicatio]' \
      '(--path)--path[Push application from specified path]'\
      '(--url)--url[Set the url for the application]'\
    )
    ;;
  start)
    _command_args=(
      '(--debug)--debug[Start the application in debug mode]'\
    )
    ;;
  restart)
    _command_args=(
      '(--debug)--debug[Restart the application in debug mode]'\
    )
    ;;
  update)
    _command_args=(
      '(--path)--path[Update the application for a specified PATH]'\
      '(--debug)--debug[Update the application in debug mode]'\
    )
    ;;
  logs)
    _command_args=(
      '(--all)--all[Display all logs]' \
    )
    ;;
  files)
    _command_args=(
      '(--all)--all[Display all files]' \
    )
    ;;
  create-service)
    _command_args=(
      '(--bind)--bind[Create a provisioned service with a specified bind]' \
      '(--infra)--infra[Create a provisioned service on a specified infrastructure]' \
      '(--name)--name[Create a provisioned service with a specified name]' \
    )
    ;;
  tunnel)
    _command_args=(
      '(--port)--port[Create a local tunnel to a service with a specified port]'\
    )
    ;;
  add-user)
    _command_args=(
      '(--email)--email[Login with specified email]'\
      '(--passwd)--passwd[Login with specified password]' \
    )
    ;;
  esac

_arguments \
  $_command_args \
  && return 0

# Local Variables:
# mode: Shell-Script
# sh-indentation: 2
# indent-tabs-mode: nil
# sh-basic-offset: 2
# End:
# vim: ft=zsh sw=2 ts=2 et
