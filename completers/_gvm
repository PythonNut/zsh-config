#compdef gvm
# ------------------------------------------------------------------------------
# Description
# -----------
# 
# Completion script for gvm (https://github.com/moovweb/gvm)
# 
# ------------------------------------------------------------------------------
# Authors
# -------
# 
# * Hideo Hattori <hhatto.jp@gmail.com>
# 
# ------------------------------------------------------------------------------

typeset -A opt_args
local context state line

_gvm() {
  _arguments -s -S \
    "*::gvm commands:_gvm_command"
}

_gvm_command() {
  local ret=1

  if (( CURRENT == 1 )); then
    _values "gvm sub command" \
      "version[print the gvm version number]" \
      "get[gets the latest code (for debugging)]" \
      "use[select a go version to use]" \
      "diff[view changes to Go root]" \
      "implode[completely remove gvm]" \
      "install[install go versions]" \
      "uninstall[uninstall go versions]" \
      "cross[install go cross compilers]" \
      "linkthis[link this directory into GOPATH]" \
      "list[list installed go versions]" \
      "listall[list available versions]" \
      "alias[manage go version aliases]" \
      "pkgset[manage go packages sets]"
  else
    local curcontext="$curcontext"
    _call_function ret _gvm_$words[1];
  fi

  return ret;
}

_gvm_use() {
  if (( CURRENT == 2 )); then
    _use_versions=( $(gvm list | grep "^ *[0-9A-Za-z]" | awk '{print $1}') )
    _describe -t gvm_use "gvm use" _use_versions
  fi
}

_gvm_install() {
  if (( CURRENT == 2 )); then
    _use_versions=( $(gvm listall | grep "^ *[0-9A-Za-z]" | awk '{print $1}') )
    _describe -t gvm_use "gvm install" _use_versions
  fi
}

_gvm_uninstall() {
  if (( CURRENT == 2 )); then
    _use_versions=( $(gvm list | grep "^ *[0-9A-Za-z]" | awk '{print $1}') )
    _describe -t gvm_use "gvm uninstall" _use_versions
  fi
}

_gvm_cross() {
  local -a cmds
  if (( CURRENT == 2 )); then
    cmds=('linux' 'darwin' 'windows')
    _describe -t commands "os" cmds
  elif (( CURRENT == 3 )); then
    cmds=('amd64' '386')
    _describe -t commands "arch" cmds
  fi
}

_gvm_alias() {
  if (( CURRENT == 2 )); then
    _values "gvm pkgset sub command" \
      "create[create a new alias]" \
      "delete[delete an alias]" \
      "list[list aliases]"
  elif (( CURRENT == 3 )); then
    case $words[2] in
      delete)
        _use_pkgs=( $(gvm alias list | grep "^ *[0-9A-Za-z]" | awk '{print $1}') )
        _describe -t gvm_use "gvm use" _use_pkgs
        ;;
    esac
  fi
}

_gvm_pkgset() {
  if (( CURRENT == 2 )); then
    _values "gvm pkgset sub command" \
      "create[create a new package set]" \
      "delete[delete a package set]" \
      "use[select where gb and goinstall target and link]" \
      "empty[remove all code and compiled binaries from package set]" \
      "list[list installed go packages]"
  elif (( CURRENT == 3 )); then
    case $words[2] in
      delete|use|empty)
        _use_pkgs=( $(gvm pkgset list | grep "^ *[0-9A-Za-z]" | awk '{print $1}') )
        _describe -t gvm_use "gvm use" _use_pkgs
        ;;
    esac
  fi
}

_gvm "$@"
